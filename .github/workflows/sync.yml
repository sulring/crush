name: Sync and Build with Upstream
on:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours to catch new tags
  workflow_dispatch:
    inputs:
      build_current:
        description: 'Build current custom version (ignores upstream check)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  sync-and-build:
    runs-on: ubuntu-latest
    outputs:
      update_needed: ${{ steps.check.outputs.update_needed }}
      latest_tag: ${{ steps.tags.outputs.latest_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Add upstream remote
        run: git remote add upstream https://github.com/charmbracelet/crush.git
      
      - name: Fetch upstream tags and branches
        run: |
          git fetch upstream --tags --force
          git fetch upstream main
      
      - name: Get current and latest tags
        id: tags
        run: |
          CURRENT_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          LATEST_TAG=$(git describe --tags --abbrev=0 upstream/main 2>/dev/null || echo "v0.0.0")
          echo "current_tag=$CURRENT_TAG" >> $GITHUB_OUTPUT
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Current: $CURRENT_TAG, Latest: $LATEST_TAG"
          
          # Check if we have a custom tag for current version
          CUSTOM_TAG="${LATEST_TAG}-x"
          if git rev-parse $CUSTOM_TAG >/dev/null 2>&1; then
            echo "current_custom_tag=$CUSTOM_TAG" >> $GITHUB_OUTPUT
          else
            echo "current_custom_tag=v0.0.0" >> $GITHUB_OUTPUT
          fi
      
      - name: Check if update needed
        id: check
        run: |
          CURRENT_CUSTOM="${{ steps.tags.outputs.current_custom_tag }}"
          if [ "${{ github.event.inputs.build_current }}" = "true" ]; then
            echo "Manual build requested"
            echo "update_needed=true" >> $GITHUB_OUTPUT
          elif [ "$CURRENT_CUSTOM" = "${{ steps.tags.outputs.latest_tag }}-x" ]; then
            echo "Already have custom tag for ${{ steps.tags.outputs.latest_tag }}"
            echo "update_needed=false" >> $GITHUB_OUTPUT
          else
            echo "New upstream tag available"
            echo "update_needed=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Determine target tag
        id: target
        run: |
          if [ "${{ github.event.inputs.build_current }}" = "true" ]; then
            echo "target_tag=${{ steps.tags.outputs.latest_tag }}" >> $GITHUB_OUTPUT
          else
            echo "target_tag=${{ steps.tags.outputs.latest_tag }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Rebase and create release tag
        if: steps.check.outputs.update_needed == 'true'
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "7470800+sulring@users.noreply.github.com"
          git checkout custom-keyboard-mappings
          # Attempt rebase
          if ! git rebase ${{ steps.target.outputs.target_tag }}; then
            echo "Rebase failed - aborting and creating issue"
            git rebase --abort
            echo "::error::Rebase failed due to merge conflicts. Manual resolution required."
            exit 1
          fi
          git push origin custom-keyboard-mappings --force-with-lease
          # Create the SAME tag as upstream for release
          echo "Creating new tag ${{ steps.target.outputs.target_tag }}-x"
          git tag ${{ steps.target.outputs.target_tag }}-x
          git push origin ${{ steps.target.outputs.target_tag }}-x

  build:
    needs: sync-and-build
    if: needs.sync-and-build.outputs.update_needed == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
      - name: Checkout custom branch for building
        uses: actions/checkout@v4
        with:
          ref: custom-keyboard-mappings
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
      
      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          VERSION=${{ needs.sync-and-build.outputs.latest_tag }}
          BINARY_NAME=crush-${{ matrix.goos }}-${{ matrix.goarch }}
          
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME=${BINARY_NAME}.exe
          fi
          
          go build -ldflags="-X github.com/charmbracelet/crush/internal/version.Version=${VERSION}" -o ${BINARY_NAME} .
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: crush-${{ matrix.goos }}-${{ matrix.goarch }}
          path: crush-*

  release:
    needs: [sync-and-build, build]
    if: needs.sync-and-build.outputs.update_needed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.sync-and-build.outputs.target_tag }}-x
          name: ${{ needs.sync-and-build.outputs.target_tag }}-x (Custom Keyboard Mappings)
          body: |
            Auto-built version of crush with custom keyboard mappings
            
            Based on upstream tag: ${{ needs.sync-and-build.outputs.target_tag }}
            
            Changes:
            - Custom keyboard key mappings across components
            - Rebased on latest upstream changes
          draft: false
          prerelease: false
          files: |
            artifacts/*/crush-*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}